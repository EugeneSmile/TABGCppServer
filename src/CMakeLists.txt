set(TARGET_NAME ${PROJECT_NAME})
message(STATUS "Configuring ${TARGET_NAME}")

# Build configuration
set(PROJECT_VERSION_MAJOR 0)
set(PROJECT_VERSION_MINOR 1)
set(PROJECT_VERSION_PATCH 0)
set(PROJECT_VERSION_BRANCH "N/A")
set(PROJECT_VERSION_COMMIT "N/A")

# Get the current working branch
execute_process(
    COMMAND git rev-parse --abbrev-ref HEAD
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    OUTPUT_VARIABLE PROJECT_VERSION_BRANCH
    OUTPUT_STRIP_TRAILING_WHITESPACE)

# Get the latest commit hash
execute_process(
    COMMAND git rev-parse --short HEAD
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    OUTPUT_VARIABLE PROJECT_VERSION_COMMIT
    OUTPUT_STRIP_TRAILING_WHITESPACE)

set(PROJECT_VERSION_FULL ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}.${PROJECT_VERSION_PATCH}-${PROJECT_VERSION_BRANCH}-${PROJECT_VERSION_COMMIT})

configure_file(
    ${CMAKE_CURRENT_LIST_DIR}/Helpers/Version.h.in
    ${CMAKE_CURRENT_LIST_DIR}/Helpers/Version.h)

add_compile_definitions(MAGIC_ENUM_RANGE_MIN=0 MAGIC_ENUM_RANGE_MAX=256)

set(${PROJECT_NAME}_SOURCES "main.cpp")
set(${PROJECT_NAME}_INCLUDES "Helpers/Version.h")
set(${PROJECT_NAME}_INCLUDE_DIRS "")
set(${PROJECT_NAME}_DEPENDENCIES spdlog toml11 enet Crow::Crow magic_enum)

if(${ENABLE_TUI})
    add_compile_definitions(ENABLE_TUI)
    list(APPEND ${PROJECT_NAME}_DEPENDENCIES imtui imtui-ncurses)
endif()

set(SUBDIRS_LIST "")
SubDirList(${CMAKE_CURRENT_LIST_DIR} SUBDIRS_LIST)

foreach(SUBDIR IN LISTS SUBDIRS_LIST)
    if(NOT ${SUBDIR} STREQUAL "UI" OR ${ENABLE_TUI})
        file(GLOB_RECURSE SUBDIR_SOURCES ${CMAKE_CURRENT_LIST_DIR}/${SUBDIR}/*.cc ${CMAKE_CURRENT_LIST_DIR}/${SUBDIR}/*.cpp)
        list(APPEND ${PROJECT_NAME}_SOURCES ${SUBDIR_SOURCES})
        file(GLOB_RECURSE SUBDIR_INCLUDES ${CMAKE_CURRENT_LIST_DIR}/${SUBDIR}/*.h)
        list(APPEND ${PROJECT_NAME}_INCLUDES ${SUBDIR_INCLUDES})
        list(APPEND ${PROJECT_NAME}_INCLUDE_DIRS ${CMAKE_CURRENT_LIST_DIR}/${SUBDIR})
    endif()
endforeach()

add_executable(${TARGET_NAME} ${${PROJECT_NAME}_SOURCES} ${${PROJECT_NAME}_INCLUDES})
target_include_directories(${TARGET_NAME} PUBLIC ${${PROJECT_NAME}_INCLUDE_DIRS})

# if(NOT ${${PROJECT_NAME}_DEPENDENCIES})
add_dependencies(${TARGET_NAME} ${${PROJECT_NAME}_DEPENDENCIES})
target_link_libraries(${TARGET_NAME} ${${PROJECT_NAME}_DEPENDENCIES})

# endif()

# include_directories(${CMAKE_CURRENT_LIST_DIR})
# target_include_directories(${TARGET_NAME} PUBLIC ${CMAKE_CURRENT_LIST_DIR})
install(TARGETS ${TARGET_NAME}
    PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${TARGET_NAME}/
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    INCLUDES DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${TARGET_NAME}/
    ARCHIVE DESTINATION ${CMAKE_INSTALL_SHAREDSTATEDIR})
